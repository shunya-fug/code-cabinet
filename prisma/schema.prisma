// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_DEV_PRISMA_URL") // uses connection pooling
  directUrl         = env("POSTGRES_DEV_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_DEV_URL_NON_POOLING") // used for migrations
}

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider    = "zod-prisma"
  output      = "../src/generated/schemas/zod"
  modelSuffix = "Schema"
}

generator erd {
  provider                  = "prisma-erd-generator"
  output                    = "../docs/db/erd.md"
  theme                     = "forest"
  includeRelationFromFields = true
}

model Snippet {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  title       String
  language    String
  code        String
  description String?
  tags        String[]
  isPublic    Boolean  @default(false) @map("is_public")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  groupSnippets GroupSnippet[]

  @@map("snippets")
}

model Permission {
  id          String  @id @default(cuid())
  name        String
  description String?

  roles RolePermission[]

  @@map("permissions")
}

model Role {
  id          String  @id @default(cuid())
  name        String
  description String?

  userGroups      UserGroup[]
  rolePermissions RolePermission[]

  @@map("roles")
}

model RolePermission {
  roleId       String     @map("role_id")
  permissionId String     @map("permission_id")
  role         Role       @relation(fields: [roleId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])

  @@id([roleId, permissionId])
  @@map("role_permissions")
}

model Group {
  id          String   @id @default(cuid())
  name        String
  allowPublic Boolean  @default(false) @map("allow_public")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  users         UserGroup[]
  groupSnippets GroupSnippet[]

  @@map("groups")
}

model UserGroup {
  id      String @id @default(cuid())
  userId  String @map("user_id")
  groupId String @map("group_id")

  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  group  Group   @relation(fields: [groupId], references: [id], onDelete: Cascade)
  role   Role?   @relation(fields: [roleId], references: [id])
  roleId String?

  @@unique([userId, groupId])
  @@map("user_groups")
}

model GroupSnippet {
  id          String   @id @default(cuid())
  groupId     String   @map("group_id")
  snippetId   String   @map("snippet_id")
  allowPublic Boolean? @map("allow_public")

  group   Group   @relation(fields: [groupId], references: [id], onDelete: Cascade)
  snippet Snippet @relation(fields: [snippetId], references: [id], onDelete: Cascade)

  @@unique([groupId, snippetId])
  @@map("group_snippets")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?

  accounts  Account[]
  sessions  Session[]
  snippets  Snippet[]
  UserGroup UserGroup[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
